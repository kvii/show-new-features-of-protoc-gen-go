syntax = "proto3";

package pb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";

option go_package = "github.com/kvii/show-new-features-of-protoc-gen-go/pb;pb";

// 其实 google 提供了一些注解，用于生成 http 路由。
// 其他插件也可以读取这些注解，生成代码。比如可以生成自定义的 http server。
// 也可以生成 http 接口文档。比如使用 openapi 插件可以生成 openapi.yaml
// 它能直接导入到 postman 等平台中。也可以自己写插件，直接生成 web
// 页面上的接口说明。
service UserService {
  // 这就是个 http 路由。google 提供了对应的注解。用来声明 http 路由。
  // 这些定义在 ../third_party/google/api/annotations.proto 中。
  rpc CreateUser(CreateUserRequest) returns (CreateUserReply) {
    option (google.api.http) = {
      post : "/v1/user"
      body : "*"
    };
  };
}

// 创建用户接口请求格式
message CreateUserRequest {
  // 用户名
  string user_name = 1;
}

// 创建用户接口响应格式
message CreateUserReply {
  // 用户信息
  UserInfo user = 1;
}

// 注释是可以生成到代码中的。
message UserInfo {
  // 官方建议使用 snake_case 而非 camelCase。
  // 我不知道不这样做具体会出什么麻烦，但至少会少很多麻烦。
  // 这样生成出来的字段会带有 `json:"user_id,omitemtpy"` 的 tag。
  // 用普通的 json 逻辑就不能生成正确的 json 了。 但用 protojson 就没问题。
  //
  // https://protobuf.dev/programming-guides/style/#message-field-names
  int32 user_id = 1;

  // google 提供了一些 well-known types，比如 timestamp。
  // 这个类型可以用于和 json 时间格式互转。
  // 这些类型的定义在 ../third_party/google/protobuf/timestamp.proto 中。
  google.protobuf.Timestamp created_at = 2;

  // 对于某些需要区分 null 和 零值的字段，可以用 wrapper 类型。
  // 这些类型的定义在 ../third_party/google/protobuf/wrappers.proto 中。
  google.protobuf.Int32Value score = 3;
}